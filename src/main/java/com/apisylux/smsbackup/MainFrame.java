/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.apisylux.smsbackup;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author ahsan
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    File[] file ;
    ArrayList al;
    int messagecount;
    int freshcount;
    int duplicateinfiles;
    public MainFrame() {
        initComponents();
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(535,410);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DatabaseStatus = new javax.swing.JLabel();
        SourceApplication = new javax.swing.JComboBox();
        DirectoryField = new javax.swing.JTextField();
        SelectionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Description = new javax.swing.JTextArea();
        DatabaseSelection = new javax.swing.JComboBox();
        UpdateButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenMenu = new javax.swing.JMenuItem();
        CloseMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ConfigureMySqlMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DatabaseStatus.setVisible(false);
        DatabaseStatus.setText("jLabel1");

        SourceApplication.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sms Backup & Restore" }));
        SourceApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceApplicationActionPerformed(evt);
            }
        });

        SelectionButton.setText("Open File/Folder");
        SelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionButtonActionPerformed(evt);
            }
        });

        Description.setColumns(20);
        Description.setRows(5);
        jScrollPane1.setViewportView(Description);

        DatabaseSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MongoDB", "Mysql" }));
        DatabaseSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DatabaseSelectionItemStateChanged(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        OpenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        jMenu1.add(OpenMenu);

        CloseMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        CloseMenu.setText("Close");
        CloseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseMenuActionPerformed(evt);
            }
        });
        jMenu1.add(CloseMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        ConfigureMySqlMenu.setText("Configure MySql");
        ConfigureMySqlMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigureMySqlMenuActionPerformed(evt);
            }
        });
        jMenu2.add(ConfigureMySqlMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(SelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SourceApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DatabaseSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DatabaseStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SourceApplication)
                    .addComponent(DatabaseStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SelectionButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(DirectoryField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatabaseSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionButtonActionPerformed
        file = new FileManipulation().getFile();
        DirectoryField.setText(file[0].getParent());
        Description.append(file.length+" file are selected!\n");
        Description.updateUI();
        this.repaint(); 
        
        al = new FileManipulation().getMessages(file);
        messagecount = al.size();
        Description.append("Total Messages Found in Files: "+messagecount+"\n");
        Description.updateUI();
        this.repaint(); 
        
        al = new DuplicationFileCheck().DuplicateInFiles(al);
        int duplicateinfiles = messagecount - al.size();
        freshcount = al.size();
        Description.append("Total Duplicate Messages Found in Files: "+duplicateinfiles+"\n");
        Description.updateUI();
        this.repaint(); 
        
        
    }//GEN-LAST:event_SelectionButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        String databaseselection = (String)DatabaseSelection.getSelectedItem();
        if(databaseselection.equals("MongoDB")){
            al = new DuplicateMongoDBCheck().DuplicateMongoDB(al);
            int duplicateindb = freshcount - al.size();
            int refreshcount = al.size();
            Description.append("Total Duplicate Messages Found in Database: "+duplicateindb+"\n");
            Description.updateUI();
            this.repaint();
            int update = new MongoDBCollection().UpdateRecord(al);
            Description.append("Messages Updated: "+update+"\n");
            Description.updateUI();
        }else if(databaseselection.equals("Mysql")){

            new DuplicateEntryDatabase(al);
            
            
            
            
        }
        
        
        
        
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        file = new FileManipulation().getFile();
        DirectoryField.setText(file[0].getParent());
        Description.append(file.length+" file are selected!\n");
        Description.updateUI();
        this.repaint(); 
        
        al = new FileManipulation().getMessages(file);
        messagecount = al.size();
        Description.append("Total Messages Found in Files: "+messagecount+"\n");
        Description.updateUI();
        this.repaint(); 
        
        al = new DuplicationFileCheck().DuplicateInFiles(al);
        duplicateinfiles = messagecount - al.size();
        freshcount = al.size();
        Description.append("Total Duplicate Messages Found in Files: "+duplicateinfiles+"\n");
        Description.updateUI();
        this.repaint(); 
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void CloseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseMenuActionPerformed
        System.exit(1);
    }//GEN-LAST:event_CloseMenuActionPerformed

    private void DatabaseSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DatabaseSelectionItemStateChanged
        if(((String)DatabaseSelection.getSelectedItem()).equals("MongoDB")){
            try{
                //new CreateConnection().ConnectMongo().getDB("textmessages").collectionExists("ahsan");
                DatabaseStatus.setText((String)DatabaseSelection.getSelectedItem() + " Connected!");
                DatabaseStatus.setVisible(true);
            }catch(Exception ex){
                DatabaseStatus.setText((String)DatabaseSelection.getSelectedItem() + " Not Connected!");
            }
        }else if(((String)DatabaseSelection.getSelectedItem()).equals("Mysql")){
            try{
                new CreateConnection().ConnectMysql().getSchema();
                DatabaseStatus.setText((String)DatabaseSelection.getSelectedItem() + " Connected!");
                DatabaseStatus.setVisible(true);
            }catch(Exception ex){
                DatabaseStatus.setText((String)DatabaseSelection.getSelectedItem() + " Not Connected!");
            }
        }
        
    }//GEN-LAST:event_DatabaseSelectionItemStateChanged

    private void SourceApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceApplicationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SourceApplicationActionPerformed

    private void ConfigureMySqlMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigureMySqlMenuActionPerformed
        MySqlConfigFrame sqlframe = new MySqlConfigFrame();
        
    }//GEN-LAST:event_ConfigureMySqlMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CloseMenu;
    private javax.swing.JMenuItem ConfigureMySqlMenu;
    private javax.swing.JComboBox DatabaseSelection;
    private javax.swing.JLabel DatabaseStatus;
    private javax.swing.JTextArea Description;
    private javax.swing.JTextField DirectoryField;
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JButton SelectionButton;
    private javax.swing.JComboBox SourceApplication;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
